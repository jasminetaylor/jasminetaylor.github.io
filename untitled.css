.hex {
	width:150px;
	width: calc(#{$hex-container-width} / #{$hex-first-row-amount});
	height:86px;
	background-color: #ccc;
	background-repeat: no-repeat;
	background-position: 50% 50%;			
	-webkit-background-size: auto 173px;							
	-moz-background-size: auto 173px;							
	-ms-background-size: auto 173px;							
	-o-background-size: auto 173px;							
	position: relative;
	float:left;
	margin:25px 5px;
	text-align:center;
	zoom:1;
}
		
	.hex.hex-gap {
		margin-left: 86px;
	}
	
	.hex a {
		display:block;
		width: 100%;
		height:100%;
		text-indent:-9999em;
		position:absolute;
		top:0;
		left:0;
	}

	.hex .corner-1,
	.hex .corner-2 {
		position: absolute;
		top:0;
		left:0;
		width:100%;
		height:100%;
		background: inherit;								
		z-index:-2;						
		overflow:hidden;
		-webkit-backface-visibility: hidden;
		-moz-backface-visibility: hidden;
		-ms-backface-visibility: hidden;
		-o-backface-visibility: hidden;			
		backface-visibility: hidden;			
	}
	
	.hex .corner-1 {
		z-index:-1;
		-webkit-transform: rotate(60deg);
		-moz-transform: rotate(60deg);
		-ms-transform: rotate(60deg);
		-o-transform: rotate(60deg);
		transform: rotate(60deg);
	}
	
	.hex .corner-2 {
		-webkit-transform: rotate(-60deg);
		-moz-transform: rotate(-60deg);
		-ms-transform: rotate(-60deg);
		-o-transform: rotate(-60deg);
		transform: rotate(-60deg);
	}
	
	.hex .corner-1:before,
	.hex .corner-2:before {
		width: 173px;
		height:	173px;
	  content: '';
	  position: absolute;
	  background: inherit;
	  top:0;
	  left: 0;
	  z-index: 1;
	  background: inherit;
	  background-repeat:no-repeat;
		-webkit-backface-visibility: hidden;
		-moz-backface-visibility: hidden;
		-ms-backface-visibility: hidden;
		-o-backface-visibility: hidden;	
		backface-visibility: hidden;				  
	}			
	

	.hex .corner-1:before {
		-webkit-transform: rotate(-60deg) translate(-87px, 0px);
		-moz-transform: rotate(-60deg) translate(-87px, 0px);
		-ms-transform: rotate(-60deg) translate(-87px, 0px);
		-o-transform: rotate(-60deg) translate(-87px, 0px);
		transform: rotate(-60deg) translate(-87px, 0px);	
	  -webkit-transform-origin: 0 0;
	  -moz-transform-origin: 0 0;
	  -ms-transform-origin: 0 0;
	  -o-transform-origin: 0 0;
	  transform-origin: 0 0;
	}			
	
	.hex .corner-2:before {
		-webkit-transform: rotate(60deg) translate(-48px, -11px);
		-moz-transform: rotate(60deg) translate(-48px, -11px);
		-ms-transform: rotate(60deg) translate(-48px, -11px);
		-o-transform: rotate(60deg) translate(-48px, -11px);
		transform: rotate(60deg) translate(-48px, -11px);	
		bottom:0;
	}	

.js-grid-refresh:focus {
  outline: none;
}

// Our first row has 6 items in it, so we'll use that number to calculate
// some widths and spacing values
$hex-first-row-amount: 6;

// This component will take up the entire viewport width
$hex-container-width: 100vw;

$hex-small-bp: 768px;

.c-hex-container {
  overflow: hidden;
}

.c-hex-grid {
  list-style: none;
  margin: 0;
  padding: 0;
  width: 5000px;

  @media (max-width: #{$hex-small-bp}) {
    width: 100%;
  }
}


.c-hex-grid__item {
  float: left;
  width: 200px;
  width: calc(#{$hex-container-width} / #{$hex-first-row-amount});
  clip-path: polygon(50% 0%, 100% 25%, 100% 75%, 50% 100%, 0% 75%, 0% 25%);
  border-left: 2px solid #fff;
  border-right: 2px solid #fff;
  // Weird rendering bug when overflow: hidden; is on a clip path parent
  // this fixes it somehow
  transform: translateZ(0);

  @media (min-width: 1200px) {
    border-left: 4px solid #fff;
    border-right: 4px solid #fff;
  }

  @media (max-width: #{$hex-small-bp}) {
    width: calc(#{$hex-container-width} / #{$hex-first-row-amount / 3});
    margin-bottom: calc(#{$hex-container-width} / -#{$hex-first-row-amount * 1.25});
    &:nth-child(3n+1) {
      margin-left: calc(#{$hex-container-width} / #{$hex-first-row-amount / 1.5});
      clear: left;
      opacity: 0.4;

      &:last-child {
        margin-bottom: 0;
      }
    }
  }

  &:hover {
    opacity: 0.4;
  }

  @media (min-width: #{$hex-small-bp}) {
    // These are the beginnings of new rows
    &:nth-child(7),
    &:nth-child(14) {
      clear: left;
    }

    // These are the hex items that overflow
    &:nth-child(1),
    &:nth-child(6),
    &:nth-child(7),
    &:nth-child(13),
    &:nth-child(14),
    &:nth-child(19) {
      opacity: 0.4;
      z-index: -1;
    }

    // Usually an even row that we need to offset to create the honeycomb pattern
    &:nth-child(n+7):nth-child(-n+13) {
      position: relative;
      left: -105px;
      left: calc(#{$hex-container-width}/-#{$hex-first-row-amount * 2});
      top: -58px;
      top: calc(#{$hex-container-width}/-#{$hex-first-row-amount * 4});
      margin-bottom: -111px;
      margin-bottom: calc(#{$hex-container-width}/-#{$hex-first-row-amount * 2});
    }
  }

}

.hex {
  display: block;
  width: 100%;
}

  